#### Tell me about a time when you didn't meet customer/deadline/manager expectations. What happened, and how did you deal with the situation? #####

Situation:
While working on delivering rolling upgrades for our object storage system, we designed a patent-worthy approach to achieve zero downtime. The architecture included upgrading multiple components—database schema, binary files, versioned APIs, and the dstore pods (Kubernetes pods managing node data).

A key challenge was upgrading dstores without disrupting data availability. Our system used diskgroups, each consisting of six dstores implementing erasure coding. To maintain availability, at least four dstores per diskgroup needed to remain operational at all times.

Task:
I was responsible for implementing the upgrade strategy. The plan was to upgrade two dstores at a time per diskgroup, ensuring at least four remained active. Once the first two successfully upgraded, the next two would follow, and so on. This sequential approach was designed to prevent data unavailability.

Action:
After completing the implementation, I ran extensive upgrade tests across different environments. However, during testing, I observed an unexpected issue:

In some cases, the first two dstores did not restart successfully post-upgrade.

Despite this failure, the next batch of two dstores was triggered for upgrade, further reducing available dstores.

This occasionally brought the total active dstores below four, violating the redundancy requirement and potentially causing data unavailability.

I debugged the failure scenarios and identified that the dstore restart behavior was inconsistent across different workloads. Some pods failed to come up due to prolonged initialization times, causing a cascading effect on subsequent upgrade batches.

Recognizing that fully resolving the issue would take additional time, we prioritized minimizing customer impact by:

Providing direct engineering assistance to customers during upgrades. Our team set up a dedicated support channel where engineers, including myself, worked closely with customers to guide them through the upgrade process and mitigate risks in real-time.

Offering a temporary manual upgrade plan, allowing customers to upgrade disk groups in a controlled manner to avoid downtime for critical workloads.

Communicating proactively with customers, explaining the situation, our immediate workarounds, and our ongoing improvements, which helped maintain trust.

Result:
At that point, I was unable to fully resolve the issue, but I identified key areas for improvement:

Implementing a health-check mechanism to verify successful dstore pod restarts before triggering the next batch.

Adding rollback logic to restore the last stable state if a dstore pod fails to start within a predefined timeframe.

Introducing a prioritization mechanism to upgrade lower-traffic nodes first and adjust batch sizes dynamically based on real-time health metrics.

Since I was unable to complete the fix at that time, I escalated the issue to the team, documented my findings, and collaborated with others to refine the upgrade strategy further. This experience reinforced the importance of real-world testing beyond theoretical design and proactively ensuring customer satisfaction, even in the face of delays.








#### Tell me about a time when you showed an initiative to work on a challenging project. ####

Situation:
During my first year at Robin.io, I was working on the Multi-Data Center Automation Platform (MDCAP) project, which focused on automating deployments across multiple data centers. While this was a critical project, I was eager to take on a more technically challenging role that would provide deeper exposure to storage internals and distributed systems.

Task:
An internal customer had a requirement to build an AWS S3-compatible object storage system from scratch. This was a highly ambitious project that involved designing and implementing replication, data management, encryption, scalability, and system resilience features. Given the complexity and the opportunity to work on end-to-end software development, I saw this as a chance to expand my expertise and proactively expressed my interest in joining the team.

Action:
To transition into this new project, I:

Took the initiative to learn about object storage architectures, replication mechanisms, and encryption techniques to prepare for the challenges ahead.

Collaborated with key stakeholders to understand their requirements and ensure that the architecture aligned with business needs.

Worked on critical features like rolling upgrades, bucket and object lifecycle management, and server-side encryption to enhance security and system performance.

Developed scalable solutions that could handle high-volume data operations efficiently.

Result:
By stepping up to this challenge, I was able to gain deep technical expertise in object storage while directly contributing to the successful development of the product. My work on this project strengthened my understanding of distributed systems, large-scale storage solutions, and Kubernetes-based deployments, helping me grow as a software engineer.


#####  Tell me about a time when you took on a task that was beyond your job responsibilities.  #####

Situation:
At IBM, a user requirement emerged to auto-populate multiple SSL certificate fields based on specific use cases, such as web browsers, key servers, and other applications. The goal was to recommend pre-defined configurations for each use case while allowing users to modify them before creating the certificate. If any fields were incorrectly edited, the system would return an error.

Task:
While my primary responsibility was to implement the business logic for auto-population, I identified a potential pain point in the user experience—users had to submit the certificate request to validate their edits, and errors were only detected post-submission. This meant users had to go through a trial-and-error process, leading to unnecessary delays and frustration.

Action:
I took ownership beyond my defined scope and proposed an enhancement:

Introducing a "Verify" feature that allowed users to validate their changes before submission.

This would enable users to correct any mistakes in real-time rather than waiting for an error message after submitting the request.

I designed and implemented the feature, ensuring it seamlessly integrated with the existing auto-population logic.

Since this was outside my immediate tasks, I dedicated extra hours to refine and test the solution, ensuring a smooth user experience.

Result:
The feature was successfully rolled out, significantly enhancing user experience by reducing errors and improving efficiency. Users could now validate and adjust their configurations upfront, leading to a smoother workflow. The positive feedback reinforced the value of going beyond assigned responsibilities to drive customer-centric improvements.




##### 






